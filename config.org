#+TITLE: Emacs Configuration
#+DATE: <2018-02-25 Sun>
#+AUTHOR: Christopher Olsson

* Inital setup
** Window
#+BEGIN_SRC emacs-lisp
;;; Turn off mouse interface early in startup to avoid momentary display
(when window-system
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
  (tooltip-mode -1))

(setq inhibit-startup-message t)

(custom-set-variables
 '(initial-frame-alist (quote ((fullscreen . maximized)))))
#+END_SRC
** Package
#+BEGIN_SRC emacs-lisp
(require 'package)
(add-to-list 'package-archives
             '("melpa" . "http://melpa.org/packages/") t)
(add-to-list 'package-archives '("org" . "http://orgmode.org/elpa/") t)
(when (boundp 'package-pinned-packages)
  (setq package-pinned-packages
        '((org-plus-contrib . "org"))))
(package-initialize)

;;; Bootstrap use-package
;; Install use-package if it's not already installed.
;; use-package is used to configure the rest of the packages.
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))

(eval-when-compile
  (require 'use-package))
(require 'bind-key)
#+END_SRC

* Sane defaults
#+BEGIN_SRC emacs-lisp
  ;; Saves backup files to a custom directory
  (defvar user-temporary-file-directory
    (concat temporary-file-directory user-login-name "/"))
  (make-directory user-temporary-file-directory t)
  (setq backup-by-copying t)
  (setq backup-directory-alist
        `(("." . ,user-temporary-file-directory)
          (,tramp-file-name-regexp nil)))
  (setq auto-save-list-file-prefix
        (concat user-temporary-file-directory ".auto-saves-"))
  (setq auto-save-file-name-transforms
        `((".*" ,user-temporary-file-directory t)))


  ;; Answering just 'y' or 'n' will do
  (defalias 'yes-or-no-p 'y-or-n-p)

  ;; Turn off the blinking cursor
  (blink-cursor-mode -1)

  (setq-default indent-tabs-mode nil)

  ;; Don't count two spaces after a period as the end of a sentence.
  ;; Just one space is needed.
  (setq sentence-end-double-space nil)

  ;; delete the region when typing, just like as we expect nowadays.
  (delete-selection-mode t)

  (show-paren-mode t)
  (column-number-mode t)

  (global-visual-line-mode)

  ;; -i gets alias definitions from .bash_profile
  (setq shell-command-switch "-ic")


  ;; Change C-m from RET to C-m
  (define-key input-decode-map [?\C-m] [C-m])

  (defun inform-about-m-fix()
    (interactive)
    (message "C-m is not the same as RET any more!"))

  (global-set-key (kbd "<C-m>") #'inform-about-m-fix)

#+END_SRC
* Mac customization
Sets the command modifier to meta and makes brackets and pipe work
#+BEGIN_SRC emacs-lisp
(when (string-equal system-type "darwin")
  (setq mac-option-modifier nil
        mac-command-modifier 'meta
        x-select-enable-clipboard t))
#+END_SRC

* Org
** installation
#+BEGIN_SRC emacs-lisp 
  (use-package org
               :ensure org-plus-contrib)
#+END_SRC
** org-bullets
#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :ensure t
    :init
    (setq org-bullets-bullet-list
          '("◉" "◎" "○" "☁" "◇" "►"))

    (setq org-todo-keywords '((sequence "☛ TODO(t)" "|" "✔ DONE(d)")
                              (sequence "⚑ WAITING(w)" "|")
                              (sequence "|" "✘ CANCELED(c)")))

    ;; Without this, org-mode becomes very slow
    (setq inhibit-compacting-font-caches t)
    :config
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))

#+END_SRC
* General Styling
** Theme
*** gruvbox 
    #+BEGIN_SRC emacs-lisp
      (use-package gruvbox-theme
	  :ensure t
	  :config (load-theme 'gruvbox-dark-medium t))
    #+END_SRC 
** Font
  #+BEGIN_SRC emacs-lisp
    (add-to-list 'default-frame-alist
		 '(font . "Inconsolata-14"))
  #+END_SRC
* Coding
** General
*** Multiple cursors
#+BEGIN_SRC emacs-lisp
  (use-package multiple-cursors
    :ensure t)
  ;; When you have an active region that spans multiple lines,
  ;; the following will add a cursor to each line:
  (global-set-key (kbd "C-S-c C-S-c") 'mc/edit-lines)
  ;; When you want to add multiple cursors not based on continuous lines,
  ;; but based on keywords in the buffer, use:
  (global-set-key (kbd "C->") 'mc/mark-next-like-this)
  (global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
  (global-set-key (kbd "C-c C-<") 'mc/mark-all-like-this)
#+END_SRC
** Autocomplete
*** Tern
#+BEGIN_SRC emacs-lisp
  ;; Used for auto-completion
  (use-package tern
    :ensure t
    :init 
    (add-to-list 'load-path "~/Repos/tern/emacs/")
    (add-hook 'js2-mode-hook (lambda () 
                               (tern-mode)
                               (company-mode)))
    :config
    (use-package company-tern
      :ensure t
      :init (with-eval-after-load 'company(add-to-list 'company-backends 'company-tern))))

  (define-key tern-mode-keymap (kbd "M-,") nil)
  (define-key tern-mode-keymap (kbd "M-.") nil)
#+END_SRC

** GIT
*** Magit
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t)
  ;; disable built in VC package for performance
  (setq vc-handled-backends nil)
#+END_SRC
** JavaScript
[[ https://jamiecollinson.com/blog/my-emacs-config/#javascript][Jamie Collinson's JS config]]
#+BEGIN_SRC emacs-lisp
  ;; In JS indent to 2 spaces. 
  (setq-default js-indent-level 2)

  ;;JS2-mode improves built in JS mode.
  (use-package js2-mode
    :ensure t
    :mode "\\.js\\'"
    :config
    (setq-default js2-ignored-warnings '("msg.extra.trailing.comma")))

  ;; JS2-refactor builds on top of JS2-mode and adds refactoring.
  (use-package js2-refactor
    :ensure t
    :config
    (js2r-add-keybindings-with-prefix "C-c <C-m>")
    (add-hook 'js2-mode-hook 'js2-refactor-mode))

  ;; RJSX mode makes JSX work well.
  (use-package rjsx-mode
  :ensure t)
#+END_SRC
** CLisp
*** SLIME
#+BEGIN_SRC emacs-lisp
  ;;; Emacs mode for Common Lisp
  (use-package slime
    :ensure t)    
#+END_SRC
*** SBCL
#+BEGIN_SRC emacs-lisp
  ;;; SBCL – Steel Bank Common Lisp
  ;;; A high performance Common Lisp compiler
  (setq inferior-lisp-program  "sbcl.exe")

  ;; https://astraybi.wordpress.com/2015/08/02/how-to-install-slimesbclquicklisp-into-emacs/
  ;; Generated by Quicklisp - a library manager for Common Lisp compiler
  (load (expand-file-name "C:/Users/Awrath/quicklisp/slime-helper.el"))
#+END_SRC


